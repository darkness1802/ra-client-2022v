import { useMemo, useRef, useEffect, useState } from "react"
import Peer from "simple-peer"
import sockets from "../socket"
import { useParams } from "react-router-dom"
import { MdMeetingRoom } from "react-icons/md"
import {
    BsMicFill, BsMicMuteFill,
    BsCameraVideoFill, BsCameraVideoOffFill,
    BsFillStopCircleFill, BsFillChatLeftTextFill,
    BsFillInfoCircleFill, BsFillPeopleFill
} from "react-icons/bs"
import { GridSystem } from "../comps/Room"

/** @type { page } descript: { Room } */
export default function RoomA() {

    let { id } = useParams()
    const roomId = id
    const currentUser = sessionStorage.getItem('user')
    const [peers, setPeers] = useState([])
    const [userVideoAudio, setUserVideoAudio] = useState({
        localUser: { video: true, audio: true },
    })
    const [videoDevices, setVideoDevices] = useState([])
    const [displayChat, setDisplayChat] = useState(false)
    const [screenShare, setScreenShare] = useState(false)
    const [showVideoDevices, setShowVideoDevices] = useState(false)
    const peersRef = useRef([])
    const userVideoRef = useRef()
    const screenTrackRef = useRef()
    const userStream = useRef()

    useEffect(() => {
        // Get Video Devices
        navigator.mediaDevices.enumerateDevices().then((devices) => {
            const filtered = devices.filter((device) => device.kind === 'videoinput')
            setVideoDevices(filtered)
        })

        // Set Back Button Event
        window.addEventListener('popstate', goToBack)

        // Connect Camera & Mic
        navigator.mediaDevices
            .getUserMedia({ video: true, audio: true })
            .then((stream) => {
                userVideoRef.current.srcObject = stream
                userStream.current = stream;

                socket.emit('BE-join-room', { roomId, userName: currentUser })
                socket.on('FE-user-join', (users) => {
                    // all users
                    const peers = []
                    users.forEach(({ userId, info }) => {
                        let { userName, video, audio } = info

                        if (userName !== currentUser) {
                            const peer = createPeer(userId, socket.id, stream)

                            peer.userName = userName
                            peer.peerID = userId

                            peersRef.current.push({
                                peerID: userId,
                                peer,
                                userName,
                            });
                            peers.push(peer)

                            setUserVideoAudio((preList) => {
                                return {
                                    ...preList,
                                    [peer.userName]: { video, audio },
                                };
                            });
                        }
                    });

                    setPeers(peers)
                });

                socket.on('FE-receive-call', ({ signal, from, info }) => {
                    let { userName, video, audio } = info
                    const peerIdx = findPeer(from)

                    if (!peerIdx) {
                        const peer = addPeer(signal, from, stream)

                        peer.userName = userName

                        peersRef.current.push({
                            peerID: from,
                            peer,
                            userName: userName,
                        });
                        setPeers((users) => {
                            return [...users, peer];
                        });
                        setUserVideoAudio((preList) => {
                            return {
                                ...preList,
                                [peer.userName]: { video, audio },
                            }
                        })
                    }
                })

                socket.on('FE-call-accepted', ({ signal, answerId }) => {
                    const peerIdx = findPeer(answerId)
                    peerIdx.peer.signal(signal)
                });

                socket.on('FE-user-leave', ({ userId, userName }) => {
                    const peerIdx = findPeer(userId)
                    peerIdx.peer.destroy()
                    setPeers((users) => {
                        users = users.filter((user) => user.peerID !== peerIdx.peer.peerID)
                        return [...users]
                    })
                    peersRef.current = peersRef.current.filter(({ peerID }) => peerID !== userId)
                })
            })

        socket.on('FE-toggle-camera', ({ userId, switchTarget }) => {
            const peerIdx = findPeer(userId)

            setUserVideoAudio((preList) => {
                let video = preList[peerIdx.userName].video
                let audio = preList[peerIdx.userName].audio

                if (switchTarget === 'video') video = !video;
                else audio = !audio

                return {
                    ...preList,
                    [peerIdx.userName]: { video, audio },
                }
            })
        })

        return () => {
            socket.disconnect()
        }
        // eslint-disable-next-line
    }, [])

    function createPeer(userId, caller, stream) {
        const peer = new Peer({
            initiator: true,
            trickle: false,
            stream,
        })

        peer.on('signal', (signal) => {
            socket.emit('BE-call-user', {
                userToCall: userId,
                from: caller,
                signal,
            })
        })
        peer.on('disconnect', () => {
            peer.destroy()
        })

        return peer
    }

    function addPeer(incomingSignal, callerId, stream) {
        const peer = new Peer({
            initiator: false,
            trickle: false,
            stream,
        });

        peer.on('signal', (signal) => {
            socket.emit('BE-accept-call', { signal, to: callerId });
        });

        peer.on('disconnect', () => {
            peer.destroy();
        });

        peer.signal(incomingSignal);

        return peer;
    }

    function findPeer(id) {
        return peersRef.current.find((p) => p.peerID === id);
    }

    function createUserVideo(peer, index, arr) {
        return (
          <VideoBox
            className={`width-peer${peers.length > 8 ? '' : peers.length}`}
            onClick={expandScreen}
            key={index}
          >
            {writeUserName(peer.userName)}
            <FaIcon className='fas fa-expand' />
            <VideoCard key={index} peer={peer} number={arr.length} />
          </VideoBox>
        );
      }
    
      function writeUserName(userName, index) {
        if (userVideoAudio.hasOwnProperty(userName)) {
          if (!userVideoAudio[userName].video) {
            return <UserName key={userName}>{userName}</UserName>;
          }
        }
      }
    
      // Open Chat
      const clickChat = (e) => {
        e.stopPropagation();
        setDisplayChat(!displayChat);
      };
    
      // BackButton
      const goToBack = (e) => {
        e.preventDefault();
        socket.emit('BE-leave-room', { roomId, leaver: currentUser });
        sessionStorage.removeItem('user');
        window.location.href = '/';
      };
    
      const toggleCameraAudio = (e) => {
        const target = e.target.getAttribute('data-switch');
    
        setUserVideoAudio((preList) => {
          let videoSwitch = preList['localUser'].video;
          let audioSwitch = preList['localUser'].audio;
    
          if (target === 'video') {
            const userVideoTrack = userVideoRef.current.srcObject.getVideoTracks()[0];
            videoSwitch = !videoSwitch;
            userVideoTrack.enabled = videoSwitch;
          } else {
            const userAudioTrack = userVideoRef.current.srcObject.getAudioTracks()[0];
            audioSwitch = !audioSwitch;
    
            if (userAudioTrack) {
              userAudioTrack.enabled = audioSwitch;
            } else {
              userStream.current.getAudioTracks()[0].enabled = audioSwitch;
            }
          }
    
          return {
            ...preList,
            localUser: { video: videoSwitch, audio: audioSwitch },
          };
        });
    
        socket.emit('BE-toggle-camera-audio', { roomId, switchTarget: target });
      };
    
      const clickScreenSharing = () => {
        if (!screenShare) {
          navigator.mediaDevices
            .getDisplayMedia({ cursor: true })
            .then((stream) => {
              const screenTrack = stream.getTracks()[0];
    
              peersRef.current.forEach(({ peer }) => {
                // replaceTrack (oldTrack, newTrack, oldStream);
                peer.replaceTrack(
                  peer.streams[0]
                    .getTracks()
                    .find((track) => track.kind === 'video'),
                  screenTrack,
                  userStream.current
                );
              });
    
              // Listen click end
              screenTrack.onended = () => {
                peersRef.current.forEach(({ peer }) => {
                  peer.replaceTrack(
                    screenTrack,
                    peer.streams[0]
                      .getTracks()
                      .find((track) => track.kind === 'video'),
                    userStream.current
                  );
                });
                userVideoRef.current.srcObject = userStream.current;
                setScreenShare(false);
              };
    
              userVideoRef.current.srcObject = stream;
              screenTrackRef.current = screenTrack;
              setScreenShare(true);
            });
        } else {
          screenTrackRef.current.onended();
        }
      };
    
      const expandScreen = (e) => {
        const elem = e.target;
    
        if (elem.requestFullscreen) {
          elem.requestFullscreen();
        } else if (elem.mozRequestFullScreen) {
          /* Firefox */
          elem.mozRequestFullScreen();
        } else if (elem.webkitRequestFullscreen) {
          /* Chrome, Safari & Opera */
          elem.webkitRequestFullscreen();
        } else if (elem.msRequestFullscreen) {
          /* IE/Edge */
          elem.msRequestFullscreen();
        }
      };
    
      const clickBackground = () => {
        if (!showVideoDevices) return;
    
        setShowVideoDevices(false);
      };
    
      const clickCameraDevice = (event) => {
        if (event && event.target && event.target.dataset && event.target.dataset.value) {
          const deviceId = event.target.dataset.value;
          const enabledAudio = userVideoRef.current.srcObject.getAudioTracks()[0].enabled;
    
          navigator.mediaDevices
            .getUserMedia({ video: { deviceId }, audio: enabledAudio })
            .then((stream) => {
              const newStreamTrack = stream.getTracks().find((track) => track.kind === 'video');
              const oldStreamTrack = userStream.current
                .getTracks()
                .find((track) => track.kind === 'video');
    
              userStream.current.removeTrack(oldStreamTrack);
              userStream.current.addTrack(newStreamTrack);
    
              peersRef.current.forEach(({ peer }) => {
                // replaceTrack (oldTrack, newTrack, oldStream);
                peer.replaceTrack(
                  oldStreamTrack,
                  newStreamTrack,
                  userStream.current
                );
              });
            });
        }
      };

    /*return <div className="w-screen h-screen bg-heavydark flex flex-col">
        <main className="flex items-center justify-center flex-1">
            <GridSystem />
        </main>
        <footer className="bg-lightdark flex items-center justify-between h-20">
            <div className="flex left items-center w-[33%] items-center justify-center">
                <MdMeetingRoom className="text-white text-2xl font-bold" /><h3 className="text-white text-lg font-bold">{id}</h3>
            </div>
            <div className="center flex gap-2 w-[33%] items-center justify-center">
                <button className="bg-heavydark text-lg text-white font-bold rounded-full p-3">
                    <BsMicFill />
                </button>
                <button className="bg-heavydark text-lg text-white font-bold rounded-full p-3">
                    <BsCameraVideoFill />
                </button>
                <button className="bg-heavydark text-lg text-red-600 font-bold rounded-full p-3">
                    <BsFillStopCircleFill />
                </button>
            </div>
            <div className="right flex gap-2 w-[33%] items-center justify-center">
                <button className="bg-heavydark text-lg text-white font-bold rounded-full p-3">
                    <BsFillChatLeftTextFill />
                </button>
                <button className="bg-heavydark text-lg text-white font-bold rounded-full p-3">
                    <BsFillInfoCircleFill />
                </button>
                <button className="bg-heavydark text-lg text-white font-bold rounded-full p-3">
                    <BsFillPeopleFill />
                </button>
            </div>
        </footer>
    </div>*/
}